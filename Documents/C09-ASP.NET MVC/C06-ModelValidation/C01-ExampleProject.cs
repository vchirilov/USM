/*******************************************************************************
Model validation is the process of ensuring the data we receive is suitable for binding to the model
*******************************************************************************/

public class Appointment
{
	public string ClientName { get; set; }

	[DataType(DataType.Date)]
	public DateTime Date { get; set; }

	public bool TermsAccepted { get; set; }
}

//In Home controller create standard actions for inserting an Appointment
public class HomeController : Controller
{
	public ViewResult MakeBooking()
	{
		return View(new Appointment { Date = DateTime.Now });
	}
	
	[HttpPost]
	public ViewResult MakeBooking(Appointment appt)
	{
		// statements to store new Appointment in a
		// repository would go here in a real project
		return View("Completed", appt);
	}
}

//Create view MakeBooking action
@model ModelValidation.Models.Appointment
@{
    ViewBag.Title = "Make A Booking";
}
<h4>Book an Appointment</h4>
@using (Html.BeginForm())
{
    <p>Your name: @Html.EditorFor(m => m.ClientName)</p>
    <p>Appointment Date: @Html.EditorFor(m => m.Date)</p>
    <p>@Html.EditorFor(m => m.TermsAccepted) I accept the terms & conditions</p>
    <input type="submit" value="Make Booking" />
}

//As you see when the form is posted back to the application, MakeBooking action (post one) displays Completed view

//Let's create view Completed in Views/Home
@model ModelValidation.Models.Appointment
@{
    ViewBag.Title = "Completed";
}
<h4>Your appointment is confirmed</h4>
<p>Your name is: <b>@Html.DisplayFor(m => m.ClientName)</b></p>
<p>The date of your appointment is: <b>@Html.DisplayFor(m => m.Date)</b></p>

//Run the application
/********************************************************************************************************************
Application will accept any data the user submits, but to preserve the integrity of our application and domain model, 
we require three things to be true before we accept an Appointment that the user has submitted:
• The user must provide a name.
• The user must provide a date (in the mm/dd/yyyy format) that is in the future.
• The user must have checked the check box to accept the terms and conditions.

Model validation is the process of enforcing these requirements.

*********************************************************************************************************************/

//Explicitly Validating a Model

//Add below changes to MakeBooking post action.
[HttpPost]
public ViewResult MakeBooking(Appointment appt)
{
	if (string.IsNullOrEmpty(appt.ClientName))
	{
		ModelState.AddModelError("ClientName", "Please enter your name");
	}
	if (ModelState.IsValidField("Date") && DateTime.Now > appt.Date)
	{
		ModelState.AddModelError("Date", "Please enter a date in the future");
	}
	if (!appt.TermsAccepted)
	{
		ModelState.AddModelError("TermsAccepted", "You must accept the terms");
	}
	if (ModelState.IsValid)
	{
		return View("Completed", appt);
	}
	else
	{
		return View();
	}
}

//Displaying Validation Errors to the User

//Run the application and go to to "View page source in browser" and pay attention to CSS classes generated by helper methods

<form action="/" method="post">    <p>Your name: <input class="text-box single-line" id="ClientName" name="ClientName" type="text" value="" /></p>
    <p>Appointment Date: <input class="text-box single-line" data-val="true" data-val-date="The field Date must be a date." data-val-required="The Date field is required." id="Date" name="Date" type="date" value="17/05/2019" /></p>
    <p><input class="check-box" data-val="true" data-val-required="The TermsAccepted field is required." id="TermsAccepted" name="TermsAccepted" type="checkbox" value="true" /><input name="TermsAccepted" type="hidden" value="false" /> I accept the terms & conditions</p>
    <input type="submit" value="Make Booking" />
</form>

//Now, add some invalid data in the form and click submit button and pay attention to CSS classes generated by helper methods

<form action="/" method="post">    <p>Your name: <input class="input-validation-error text-box single-line" id="ClientName" name="ClientName" type="text" value="" /></p>
    <p>Appointment Date: <input class="input-validation-error text-box single-line" data-val="true" data-val-date="The field Date must be a date." data-val-required="The Date field is required." id="Date" name="Date" type="date" value="2015-12-15" /></p>
    <p><input class="input-validation-error check-box" data-val="true" data-val-required="The TermsAccepted field is required." id="TermsAccepted" name="TermsAccepted" type="checkbox" value="true" /><input name="TermsAccepted" type="hidden" value="false" /> I accept the terms & conditions</p>
    <input type="submit" value="Make Booking" />
</form>


//Pay attention to CSS class "input-validation-error" which has been added 

//Now, add this piece of CSS code in Content/Site.css file

.input-validation-error {
    border: 1px solid #f00;
    background-color: #fee;
}

//Displaying Validation Messages

//The CSS styles that the templated helper methods apply to input elements indicate that there are problems 
//with a field, but they do not tell the user what the problem is.

//Helper method @Html.ValidationSummary() is used for displaying summary error messages for entire model

//Change MakeBooking view by adding this method
@model ModelValidation.Models.Appointment
@{
    ViewBag.Title = "Make A Booking";
}
<h4>Book an Appointment</h4>
@using (Html.BeginForm())
{
    @Html.ValidationSummary() //this piece of code
	
    <p>Your name: @Html.EditorFor(m => m.ClientName)</p>
    <p>Appointment Date: @Html.EditorFor(m => m.Date)</p>
    <p>@Html.EditorFor(m => m.TermsAccepted) I accept the terms & conditions</p>
    <input type="submit" value="Make Booking" />
}

//Run the application

//As you see a new CSS class has been added "validation-summary-errors"

<div class="validation-summary-errors" data-valmsg-summary="true">
	<ul>
		<li>Please enter your name</li>
		<li>The Date field is required.</li>
		<li>You must accept the terms</li>
	</ul>
</div>


//Now, add this piece of CSS code in Content/Site.css file
.validation-summary-errors {
    font-weight: bold;
    color: #f00;
}

//Run the application

//There are several overloads for @Html.ValidationSummary(). (see ValidationSummary Overloads.jpg)

//In order to see how model level errors work, let's analyze an example. Update MakeBooking action with this piece of code
[HttpPost]
public ViewResult MakeBooking(Appointment appt)
{

	if (string.IsNullOrEmpty(appt.ClientName))
	{
		ModelState.AddModelError("ClientName", "Please enter your name");
	}
	if (ModelState.IsValidField("Date") && DateTime.Now > appt.Date)
	{
		ModelState.AddModelError("Date", "Please enter a date in the future");
	}
	if (!appt.TermsAccepted)
	{
		ModelState.AddModelError("TermsAccepted", "You must accept the terms");
	}

	//This piece of code
	if (ModelState.IsValidField("ClientName") && ModelState.IsValidField("Date") && appt.ClientName == "Ivan")
	{
		ModelState.AddModelError("", "Joe cannot book appointments on Mondays");
	}
	//End of the code

	if (ModelState.IsValid)
	{
		return View("Completed", appt);
	}
	else
	{
		return View();
	}
}

//Now, run the application with @Html.ValidationSummary(true), @Html.ValidationSummary(false)

//Displaying Property-Level Validation Messages

//An alternative to @Html.ValidationSummary() is the possibility to display error message alongside field themselves by using @Html.ValidationMessageFor()

//Update MakeBooking view with this code
@model ModelValidation.Models.Appointment
@{
    ViewBag.Title = "Make A Booking";
}
<h4>Book an Appointment</h4>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <p>@Html.ValidationMessageFor(m => m.ClientName)</p> // this piece od code
    <p>Your name: @Html.EditorFor(m => m.ClientName)</p>

    <p>@Html.ValidationMessageFor(m => m.Date)</p> // this piece od code
    <p>Appointment Date: @Html.EditorFor(m => m.Date)</p>

    <p>@Html.ValidationMessageFor(m => m.TermsAccepted)</p> // this piece od code
    <p>@Html.EditorFor(m => m.TermsAccepted) I accept the terms & conditions</p>

    <input type="submit" value="Make Booking" />
}

//If you pay attention to the source code, you'll see another CSS class "field-validation-error"

<form action="/Home/MakeBooking" method="post"><div class="validation-summary-errors"><ul><li style="display:none"></li>
</ul></div>    <p><span class="field-validation-error" data-valmsg-for="ClientName" data-valmsg-replace="true">Please enter your name</span></p>
    <p>Your name: <input class="input-validation-error text-box single-line" id="ClientName" name="ClientName" type="text" value="" /></p>
    <p><span class="field-validation-error" data-valmsg-for="Date" data-valmsg-replace="true">The Date field is required.</span></p>
    <p>Appointment Date: <input class="input-validation-error text-box single-line" data-val="true" data-val-date="The field Date must be a date." data-val-required="The Date field is required." id="Date" name="Date" type="date" value="" /></p>
    <p><span class="field-validation-error" data-valmsg-for="TermsAccepted" data-valmsg-replace="true">You must accept the terms</span></p>
    <p><input class="input-validation-error check-box" data-val="true" data-val-required="The TermsAccepted field is required." id="TermsAccepted" name="TermsAccepted" type="checkbox" value="true" /><input name="TermsAccepted" type="hidden" value="false" /> I accept the terms & conditions</p>
    <input type="submit" value="Make Booking" />
</form>


//Add in Content/Site.css a definition for this class
.field-validation-error {
    font-weight: bold;
    color: #f00;
}
